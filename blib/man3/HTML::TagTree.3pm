.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTML::TagTree 3"
.TH HTML::TagTree 3 "2013-11-18" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
.Vb 1
\&   HTML::TagTree \- An HTML generator via a tree of \*(Aqtag\*(Aq objects.
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&   use HTML::TagTree;
\&
\&   my $html = HTML::TagTree\->new(\*(Aqhtml\*(Aq);
\&   my $head = $html\->head();
\&   my $body = $html\->body();
\&   $head\->title("This is the Title of Gary\*(Aqs Page, the opening title...");
\&   $head\->meta(\*(Aq\*(Aq, \*(Aqname=author CONTENT="Dan DeBrito"\*(Aq);
\&   $body\->div\->h1(\*(AqHello Dolly\*(Aq);
\&   my $table = $body\->table(\*(Aq\*(Aq, \*(Aqwidth=100% border=1\*(Aq);
\&   my $row1 = $table\->tr();
\&   $row1\->td(\*(Aqcell a\*(Aq);
\&   $row1\->td(\*(Aqcell b\*(Aq);
\&   $table\->tr\->td(\*(AqThis is a new row with new cell\*(Aq);  
\&   $table\->tr\->td(\*(AqThis is a another new row with new data\*(Aq);
\&
\&   # Print out the actual HTML
\&   $html\->print_html();
\&   
\&   # Put html into a scalar variable
\&   my $html_source = $html\->get_html_text();
\&
\&   # Force destruction of object tree
\&   $html\->release();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 3
\&      HTLM::TagTrees allows easy building of a tree objects where
\&      each object represents: 1) a tag 2) its value and 3) any
\&      tag attributes. Valid HTML is build of the tree via a method call.
.Ve
.SH "FEATURES"
.IX Header "FEATURES"
.Vb 5
\&   Smart quoting of tag parameters:
\&   Doing something like this:
\&      $body\->div(\*(Aq\*(Aq,\*(Aqid=nav onclick="alert(\e"Hello World\e"\*(Aq);
\&   the HTML module will render HTML that looks like:
\&      <div id="nav" onclick=\*(Aqalert("Hello World")\*(Aq \e>
\&
\&   Reduce whitespace in your HTML rendering by turning
\&   on the no_whitespace_flag.
\&   my $no_whitespace_html_text = $html\->get_html_text(\*(Aq\*(Aq,1);
\&   
\&   # Or..
\&   my $indent_level = 0;
\&   my $no_whitespace_flag = 1;
\&   print $html_obj\->get_html_text($indent_level, $no_whitespace_flag);
.Ve
.SH "INITIALIZATION"
.IX Header "INITIALIZATION"
.Vb 2
\&      HTML::TagTree\->new(tag_name,[value],[attributes])
\&         Returns a TagTree object
.Ve
.SH "METHODS"
.IX Header "METHODS"
.Vb 10
\&      Every HTML tag type is an object method.
\&      $obj\->tag_name(content,attributes);
\&         Returns:
\&            object for valid creation
\&            undef if tag_name is not a valid name;
\&         Arguments:
\&            content:
\&               Untagged data that goes in between open and close tag. eg
\&                  <b>content</b>
\&               Content my be a Perl scalar, a ref to a scalar, 
\&               or ref to a subroutine. Dereferencing occurs at the
\&               time of HTML rendering (via print_html()
\&               or get_html_text() methods).
\&            attributes:
\&               Attributes of this HTML tag.
\&               Attributes argument may be a Perl scalar, a ref to a scalar,
\&               or a ref to a subroutine. Dereferencing occurs at the
\&               time of HTML rendering.
\&               Example of attributes:
\&                  \*(Aqid=first_name name=fn class=str_cl\*(Aq
\&      get_html_text()
\&         Return valid HTML representation of tag tree starting at tab object.
\&      print_html()
\&         Prints the valid HTML to STDOUT
\&      release()
\&         Destroys all children objects so no objects reference
\&         this object (and it can be destroyed when it goes out of scope).
\&      set_valid_tags( tag_names )
\&         Clears and sets what the valid tag names are for which
\&         objects can be created.
.Ve
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.Vb 3
\&      HTML::TagTree::get_http_header();
\&         Returns the generic HTTP header:
\&            "Content\-type: text/html\enStatus: 200  OK\en\en";
.Ve
.SH "ABSTRACT"
.IX Header "ABSTRACT"
.Vb 8
\&      The philosophy of HTML::TagTree is to let you create
\&      one region of code with lots of business logic 
\&      for rendering many possible resulting HTML files/output.
\&      This differs from the approach of using business logic code
\&      to decide which HTML template (of many) to render.
\&      So rather than maintaining many HTML templates, you
\&      maintain a Perl file that does all possible customizations
\&      of HTML generation.
\&
\&      This module strives to minimize typing. Object treeing is
\&      just a simple method call, eg:
\&         $body\->h1\->b\->i(\*(AqThis is a bold, italic heading\*(Aq);
\&
\&      HTML::TagTree removes the worries of making simple HTML syntax
\&      errors such as no matching closing tag for an open tag.
.Ve
.SH "VERSION"
.IX Header "VERSION"
HTML::TagTree version 1.0.
.SH "PREREQUISITES"
.IX Header "PREREQUISITES"
No prerequisites.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dan DeBrito (<ddebrito@gmail.com>)
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2007 \- 2011 by Dan DeBrito. All rights reserved.
.SH "LICENSE"
.IX Header "LICENSE"
This package is free software; you can redistribute it and/or
modify it under the same terms as Perl itself, i.e., under the
terms of the \*(L"Artistic License\*(R" or the \*(L"\s-1GNU\s0 General Public License\*(R".
.PP
Please refer to the files \*(L"Artistic.txt\*(R", \*(L"\s-1GNU_GPL\s0.txt\*(R" and
\&\*(L"\s-1GNU_LGPL\s0.txt\*(R" in this distribution for details!
.SH "DISCLAIMER"
.IX Header "DISCLAIMER"
This package is distributed in the hope that it will be useful,
but \s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.
.PP
See the \*(L"\s-1GNU\s0 General Public License\*(R" for more details.
